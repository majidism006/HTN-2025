"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@aws";
exports.ids = ["vendor-chunks/@aws"];
exports.modules = {

/***/ "(rsc)/./node_modules/@aws/lambda-invoke-store/dist/invoke-store.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws/lambda-invoke-store/dist/invoke-store.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InvokeStore = void 0;\nconst async_hooks_1 = __webpack_require__(/*! async_hooks */ \"async_hooks\");\n// AWS_LAMBDA_NODEJS_NO_GLOBAL_AWSLAMBDA provides an escape hatch since we're modifying the global object which may not be expected to a customer's handler.\nconst noGlobalAwsLambda = process.env[\"AWS_LAMBDA_NODEJS_NO_GLOBAL_AWSLAMBDA\"] === \"1\" ||\n    process.env[\"AWS_LAMBDA_NODEJS_NO_GLOBAL_AWSLAMBDA\"] === \"true\";\nif (!noGlobalAwsLambda) {\n    globalThis.awslambda = globalThis.awslambda || {};\n}\nconst PROTECTED_KEYS = {\n    REQUEST_ID: Symbol(\"_AWS_LAMBDA_REQUEST_ID\"),\n    X_RAY_TRACE_ID: Symbol(\"_AWS_LAMBDA_X_RAY_TRACE_ID\"),\n};\n/**\n * InvokeStore implementation class\n */\nclass InvokeStoreImpl {\n    static storage = new async_hooks_1.AsyncLocalStorage();\n    // Protected keys for Lambda context fields\n    static PROTECTED_KEYS = PROTECTED_KEYS;\n    /**\n     * Initialize and run code within an invoke context\n     */\n    static run(context, fn) {\n        return this.storage.run({ ...context }, fn);\n    }\n    /**\n     * Get the complete current context\n     */\n    static getContext() {\n        return this.storage.getStore();\n    }\n    /**\n     * Get a specific value from the context by key\n     */\n    static get(key) {\n        const context = this.storage.getStore();\n        return context?.[key];\n    }\n    /**\n     * Set a custom value in the current context\n     * Protected Lambda context fields cannot be overwritten\n     */\n    static set(key, value) {\n        if (this.isProtectedKey(key)) {\n            throw new Error(`Cannot modify protected Lambda context field`);\n        }\n        const context = this.storage.getStore();\n        if (context) {\n            context[key] = value;\n        }\n    }\n    /**\n     * Get the current request ID\n     */\n    static getRequestId() {\n        return this.get(this.PROTECTED_KEYS.REQUEST_ID) ?? \"-\";\n    }\n    /**\n     * Get the current X-ray trace ID\n     */\n    static getXRayTraceId() {\n        return this.get(this.PROTECTED_KEYS.X_RAY_TRACE_ID);\n    }\n    /**\n     * Check if we're currently within an invoke context\n     */\n    static hasContext() {\n        return this.storage.getStore() !== undefined;\n    }\n    /**\n     * Check if a key is protected (readonly Lambda context field)\n     */\n    static isProtectedKey(key) {\n        return (key === this.PROTECTED_KEYS.REQUEST_ID ||\n            key === this.PROTECTED_KEYS.X_RAY_TRACE_ID);\n    }\n}\nlet instance;\nif (!noGlobalAwsLambda && globalThis.awslambda?.InvokeStore) {\n    instance = globalThis.awslambda.InvokeStore;\n}\nelse {\n    instance = InvokeStoreImpl;\n    if (!noGlobalAwsLambda && globalThis.awslambda) {\n        globalThis.awslambda.InvokeStore = instance;\n    }\n}\nexports.InvokeStore = instance;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF3cy9sYW1iZGEtaW52b2tlLXN0b3JlL2Rpc3QvaW52b2tlLXN0b3JlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQixzQkFBc0IsbUJBQU8sQ0FBQyxnQ0FBYTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsWUFBWTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIiLCJzb3VyY2VzIjpbIi9ob21lL2hhZGkvSFROLTIwMjUvbm9kZV9tb2R1bGVzL0Bhd3MvbGFtYmRhLWludm9rZS1zdG9yZS9kaXN0L2ludm9rZS1zdG9yZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW52b2tlU3RvcmUgPSB2b2lkIDA7XG5jb25zdCBhc3luY19ob29rc18xID0gcmVxdWlyZShcImFzeW5jX2hvb2tzXCIpO1xuLy8gQVdTX0xBTUJEQV9OT0RFSlNfTk9fR0xPQkFMX0FXU0xBTUJEQSBwcm92aWRlcyBhbiBlc2NhcGUgaGF0Y2ggc2luY2Ugd2UncmUgbW9kaWZ5aW5nIHRoZSBnbG9iYWwgb2JqZWN0IHdoaWNoIG1heSBub3QgYmUgZXhwZWN0ZWQgdG8gYSBjdXN0b21lcidzIGhhbmRsZXIuXG5jb25zdCBub0dsb2JhbEF3c0xhbWJkYSA9IHByb2Nlc3MuZW52W1wiQVdTX0xBTUJEQV9OT0RFSlNfTk9fR0xPQkFMX0FXU0xBTUJEQVwiXSA9PT0gXCIxXCIgfHxcbiAgICBwcm9jZXNzLmVudltcIkFXU19MQU1CREFfTk9ERUpTX05PX0dMT0JBTF9BV1NMQU1CREFcIl0gPT09IFwidHJ1ZVwiO1xuaWYgKCFub0dsb2JhbEF3c0xhbWJkYSkge1xuICAgIGdsb2JhbFRoaXMuYXdzbGFtYmRhID0gZ2xvYmFsVGhpcy5hd3NsYW1iZGEgfHwge307XG59XG5jb25zdCBQUk9URUNURURfS0VZUyA9IHtcbiAgICBSRVFVRVNUX0lEOiBTeW1ib2woXCJfQVdTX0xBTUJEQV9SRVFVRVNUX0lEXCIpLFxuICAgIFhfUkFZX1RSQUNFX0lEOiBTeW1ib2woXCJfQVdTX0xBTUJEQV9YX1JBWV9UUkFDRV9JRFwiKSxcbn07XG4vKipcbiAqIEludm9rZVN0b3JlIGltcGxlbWVudGF0aW9uIGNsYXNzXG4gKi9cbmNsYXNzIEludm9rZVN0b3JlSW1wbCB7XG4gICAgc3RhdGljIHN0b3JhZ2UgPSBuZXcgYXN5bmNfaG9va3NfMS5Bc3luY0xvY2FsU3RvcmFnZSgpO1xuICAgIC8vIFByb3RlY3RlZCBrZXlzIGZvciBMYW1iZGEgY29udGV4dCBmaWVsZHNcbiAgICBzdGF0aWMgUFJPVEVDVEVEX0tFWVMgPSBQUk9URUNURURfS0VZUztcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIGFuZCBydW4gY29kZSB3aXRoaW4gYW4gaW52b2tlIGNvbnRleHRcbiAgICAgKi9cbiAgICBzdGF0aWMgcnVuKGNvbnRleHQsIGZuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UucnVuKHsgLi4uY29udGV4dCB9LCBmbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY29tcGxldGUgY3VycmVudCBjb250ZXh0XG4gICAgICovXG4gICAgc3RhdGljIGdldENvbnRleHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGEgc3BlY2lmaWMgdmFsdWUgZnJvbSB0aGUgY29udGV4dCBieSBrZXlcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0KGtleSkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5zdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgICAgIHJldHVybiBjb250ZXh0Py5ba2V5XTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGEgY3VzdG9tIHZhbHVlIGluIHRoZSBjdXJyZW50IGNvbnRleHRcbiAgICAgKiBQcm90ZWN0ZWQgTGFtYmRhIGNvbnRleHQgZmllbGRzIGNhbm5vdCBiZSBvdmVyd3JpdHRlblxuICAgICAqL1xuICAgIHN0YXRpYyBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5pc1Byb3RlY3RlZEtleShrZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBtb2RpZnkgcHJvdGVjdGVkIExhbWJkYSBjb250ZXh0IGZpZWxkYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuc3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICAgICAgY29udGV4dFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IHJlcXVlc3QgSURcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0UmVxdWVzdElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQodGhpcy5QUk9URUNURURfS0VZUy5SRVFVRVNUX0lEKSA/PyBcIi1cIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IFgtcmF5IHRyYWNlIElEXG4gICAgICovXG4gICAgc3RhdGljIGdldFhSYXlUcmFjZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQodGhpcy5QUk9URUNURURfS0VZUy5YX1JBWV9UUkFDRV9JRCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHdlJ3JlIGN1cnJlbnRseSB3aXRoaW4gYW4gaW52b2tlIGNvbnRleHRcbiAgICAgKi9cbiAgICBzdGF0aWMgaGFzQ29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXRTdG9yZSgpICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGEga2V5IGlzIHByb3RlY3RlZCAocmVhZG9ubHkgTGFtYmRhIGNvbnRleHQgZmllbGQpXG4gICAgICovXG4gICAgc3RhdGljIGlzUHJvdGVjdGVkS2V5KGtleSkge1xuICAgICAgICByZXR1cm4gKGtleSA9PT0gdGhpcy5QUk9URUNURURfS0VZUy5SRVFVRVNUX0lEIHx8XG4gICAgICAgICAgICBrZXkgPT09IHRoaXMuUFJPVEVDVEVEX0tFWVMuWF9SQVlfVFJBQ0VfSUQpO1xuICAgIH1cbn1cbmxldCBpbnN0YW5jZTtcbmlmICghbm9HbG9iYWxBd3NMYW1iZGEgJiYgZ2xvYmFsVGhpcy5hd3NsYW1iZGE/Lkludm9rZVN0b3JlKSB7XG4gICAgaW5zdGFuY2UgPSBnbG9iYWxUaGlzLmF3c2xhbWJkYS5JbnZva2VTdG9yZTtcbn1cbmVsc2Uge1xuICAgIGluc3RhbmNlID0gSW52b2tlU3RvcmVJbXBsO1xuICAgIGlmICghbm9HbG9iYWxBd3NMYW1iZGEgJiYgZ2xvYmFsVGhpcy5hd3NsYW1iZGEpIHtcbiAgICAgICAgZ2xvYmFsVGhpcy5hd3NsYW1iZGEuSW52b2tlU3RvcmUgPSBpbnN0YW5jZTtcbiAgICB9XG59XG5leHBvcnRzLkludm9rZVN0b3JlID0gaW5zdGFuY2U7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@aws/lambda-invoke-store/dist/invoke-store.js\n");

/***/ })

};
;